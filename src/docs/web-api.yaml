# TODO: split into different files
# TODO: add links and move ids/references into them
# TODO: use JWT security system
openapi: 3.0.2

info:
  title: Web API
  description: API for administration frontend.
  version: 0.1.0

servers:
  - url: 'http://172.18.198.31:8000/api/v1'

tags:
  - name: superusers
    description: Secured SuperUsers-only calls
  - name: admins
    description: Secured Admins-only calls
  - name: users
    description: Secured authentication-needed calls
  - name: developers
    description: Specific temporary development operations


paths:

  /users:
    get:
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/count'
      tags:
        - users
      summary: Returns a list of users.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User' #'definitions/User.yaml'
    post:
      tags:
        - admins
      summary: Creates new user
      requestBody:
        $ref: '#/components/requestBodies/UserRequestBody'
      responses:
        201:
          description: Created OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User' #'definitions/User.yaml'
  /users/{u_id}:
    parameters:
      - $ref: '#/components/parameters/u_id'
    get:
      tags:
        - users
      summary: Get specific user by id
      responses:
        200:
          $ref: '#/components/responses/User200Response'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - admins
      summary: Delete user by id
      responses:
        204:
          description: Deleted OK
        404:
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - admins
      summary: Update user by id (same as PATCH)
      requestBody:
        $ref: '#/components/requestBodies/UserRequestBody'
      responses:
        200:
          $ref: '#/components/responses/User200Response'
        404:
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - admins
      summary: Update user by id (same as PUT)
      requestBody:
        $ref: '#/components/requestBodies/UserRequestBody'
      responses:
        200:
          $ref: '#/components/responses/User200Response'
        404:
          $ref: '#/components/responses/NotFound'

  /locks:
    get:
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/count'
      tags:
        - users
      summary: Returns a list of locks.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lock' #'definitions/Lock.yaml'
    post:
      deprecated: true
      tags:
        - superusers
        - developers
      summary: Creates new lock
      requestBody:
        $ref: '#/components/requestBodies/LockRequestBody'
      responses:
        201:
          description: Created OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lock' #'definitions/User.yaml'
  /locks/{l_id}:
    parameters:
      - $ref: '#/components/parameters/l_id'
    get:
      tags:
        - admins
      summary: Get specific lock by id
      responses:
        200:
          $ref: '#/components/responses/Lock200Response'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - superusers
      summary: Delete lock by id
      responses:
        204:
          description: Deleted OK
        404:
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - admins
      summary: Update lock by id (same as PATCH)
      requestBody:
        $ref: '#/components/requestBodies/LockRequestBody'
      responses:
        200:
          $ref: '#/components/responses/Lock200Response'
        404:
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - admins
      summary: Update lock by id (same as PUT)
      requestBody:
        $ref: '#/components/requestBodies/LockRequestBody'
      responses:
        200:
          $ref: '#/components/responses/Lock200Response'
        404:
          $ref: '#/components/responses/NotFound'

  /accesses:
    get:
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/count'
      tags:
        - users
      summary: Returns a list of accesses.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Access' #'definitions/Access.yaml'
    post:
      tags:
        - admins
      summary: Creates new access
      requestBody:
        $ref: '#/components/requestBodies/AccessRequestBody'
      responses:
        201:
          description: Created OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Access' #'definitions/User.yaml'
  /accesses/{a_id}:
    parameters:
      - $ref: '#/components/parameters/a_id'
    get:
      tags:
        - users
      summary: Get specific access by id
      responses:
        200:
          $ref: '#/components/responses/Access200Response'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - admins
      summary: Delete access by id
      responses:
        204:
          description: Deleted OK
        404:
          $ref: '#/components/responses/NotFound'
    put:
      deprecated: true
      tags:
        - admins
      summary: Update access by id (same as PATCH)
      requestBody:
        $ref: '#/components/requestBodies/AccessRequestBody'
      responses:
        200:
          $ref: '#/components/responses/Access200Response'
        404:
          $ref: '#/components/responses/NotFound'
    patch:
      deprecated: true
      tags:
        - admins
      summary: Update access by id (same as PUT)
      requestBody:
        $ref: '#/components/requestBodies/AccessRequestBody'
      responses:
        200:
          $ref: '#/components/responses/Access200Response'
        404:
          $ref: '#/components/responses/NotFound'

  /logs:
    get:
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/count'
      tags:
        - admins
      summary: Returns a list of logs.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log' #'definitions/Log.yaml'

  /roles:
    get:
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/count'
      tags:
        - users
      summary: Returns a list of roles.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role' #'definitions/user.yaml#/Role'
    post:
      tags:
        - superusers
      summary: Creates new role
      requestBody:
        $ref: '#/components/requestBodies/RoleRequestBody'
      responses:
        201:
          description: Created OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
  /roles/{r_id}:
    parameters:
      - $ref: '#/components/parameters/r_id'
    get:
      tags:
        - users
      summary: Get specific role bby id
      responses:
        200:
          $ref: '#/components/responses/Role200Response'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - superusers
      summary: Delete role by id
      responses:
        204:
          description: Deleted OK
        404:
          $ref: '#/components/responses/NotFound'


components:
  parameters:
    page:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
    count:
      name: count
      in: query
      schema:
        type: integer
        minimum: 30
        maximum: 100
        default: 30
    u_id:
      name: u_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/User/properties/u_id'
    l_id:
      name: l_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Lock/properties/l_id'
    a_id:
      name: a_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Access/properties/a_id'
    r_id:
      name: r_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Role/properties/r_id'

  schemas:
    User:
      type: object
      properties:
        u_id:
          type: integer
          format: int64
          readOnly: true
        is_superuser:
          type: boolean
          readOnly: true
        email:
          type: string
          format: email
          uniqueItems: true
        first_name:
          type: string
        last_name:
          type: string
        patronymic:
          type: string
        card_id:
          type: string
        role:
          $ref: '#/components/schemas/Role/properties/name'
      required:
        - email
        - first_name
        - last_name
        - card_id
    Role:
      type: object
      properties:
        r_id:
          type: integer
          format: int32
          readOnly: true
        name:
          type: string
    Lock:
      type: object
      required:
        - l_id
        - uuid
        - description
        - version
      properties:
        l_id:
          type: integer
          format: int64
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        description:
          type: string
        version:
          type: integer
          format: int32
        is_approved:
          type: boolean
        last_echo:
          type: string
          format: 'date-time'
          readOnly: true
        is_on:
          type: boolean
          readOnly: true
    Access:
      type: object
      required:
        - a_ id
        - lock
        - user
        - access_start
        - access_stop
      properties:
        a_id:
          type: integer
          format: int64
          readOnly: true
        lock:
          type: integer
          format: int64
        user:
          type: integer
          format: int64
        access_start:
          type: string
          format: 'date-time'
        access_stop:
          type: string
          format: 'date-time'
    Log:
      type: object
      required:
        - lock
        - user
        - try_time
        - result
        - is_failed
      properties:
        lock:
          type: integer
          format: int64
          readOnly: true
        user:
          type: integer
          format: int64
          readOnly: true
        try_time:
          type: string
          format: 'date-time'
          readOnly: true
        result:
          type: boolean
          readOnly: true
        is_failed:
          type: boolean
          readOnly: true

  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT

  requestBodies:
    UserRequestBody:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/User' #'definitions/User.yaml'
        application/json:
          schema:
            $ref: '#/components/schemas/User' #'definitions/User.yaml'
    LockRequestBody:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Lock' #'definitions/Lock.yaml'
        application/json:
          schema:
            $ref: '#/components/schemas/Lock' #'definitions/Lock.yaml'
    AccessRequestBody:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Access' #'definitions/Access.yaml'
        application/json:
          schema:
            $ref: '#/components/schemas/Access' #'definitions/Access.yaml'
    RoleRequestBody:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Role' #'definitions/Access.yaml'
        application/json:
          schema:
            $ref: '#/components/schemas/Role' #'definitions/Access.yaml'


  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    ForbiddenError:
      description: You are not allowed for this action
    NotFound:
      description: Not Found
    User200Response:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User' #'definitions/User.yaml'
    Lock200Response:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Lock' #'definitions/Lock.yaml'
    Access200Response:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Access' #'definitions/Access.yaml'
    Role200Response:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Role' #'definitions/Role.yaml'
